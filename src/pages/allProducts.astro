---
import Layout from "../layouts/Layout.astro"
import ProductCard from '../components/ProductCard.astro';
import fetchProducts from "../db"

let allProducts;

try {
	allProducts = await fetchProducts();
} catch (error) {
	console.error(error.message);
}

const maxPrice = Math.max(...allProducts.map(item => item.price));
const minPrice = Math.min(...allProducts.map(item => item.price));
---

<Layout title="KathZM Shop - Productos">

    <main>

		<section class="w-full lg:w-[var(--page-width)] text-black mx-auto pt-10 px-3 lg:md-0">

			<h2 class="text-3xl font-bold">Todos los productos</h2>

			<section class="mt-5 flex justify-between">
				<button id="btnToFilterSort" type="button" class="btn cursor-pointer">
					<div class="flex gap-3">
						<svg width="24" height="24" aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="none">
							<path fill-rule="evenodd" d="M4.833 6.5a1.667 1.667 0 1 1 3.334 0 1.667 1.667 0 0 1-3.334 0ZM4.05 7H2.5a.5.5 0 0 1 0-1h1.55a2.5 2.5 0 0 1 4.9 0h8.55a.5.5 0 0 1 0 1H8.95a2.5 2.5 0 0 1-4.9 0Zm11.117 6.5a1.667 1.667 0 1 0-3.334 0 1.667 1.667 0 0 0 3.334 0ZM13.5 11a2.5 2.5 0 0 1 2.45 2h1.55a.5.5 0 0 1 0 1h-1.55a2.5 2.5 0 0 1-4.9 0H2.5a.5.5 0 0 1 0-1h8.55a2.5 2.5 0 0 1 2.45-2Z" fill="currentColor"></path>
						</svg>
						<span>Filtrar y ordenar</span>
					</div>
				</button>
				<span class="lengthProducts text-md text-gray-400">{allProducts.length} productos</span>	
			</section>

			<section id="formFilterSort" class="z-30 translate-x-full fixed top-0 left-0 right-0 bottom-0 bg-[rgba(0,0,0,0.5)] text-black">
				<section class="flex flex-col bg-white transition-transform ease-in-out z-40 h-full border-l border-gray-300 shadow-2xl w-80 ml-auto">

					<section class="flex flex-row px-3 py-2 items-center border-b border-gray">
						<div class="flex flex-col flex-grow justify-center items-center">
							<h2>Filtrar y Ordenar</h2>
							<span class="lengthProducts text-md text-gray-400">{allProducts.length} productos</span>	
						</div>
						<button type="button" id="btnCancelFilter" class="cursor-pointer">
							<svg xmlns="http://www.w3.org/2000/svg" id="cancelSearch" class="cursor-pointer" width="36" height="36" viewBox="0 0 24 24" style="fill: rgb(0, 0, 0);transform: ;msFilter:;"><path d="m16.192 6.344-4.243 4.242-4.242-4.242-1.414 1.414L10.535 12l-4.242 4.242 1.414 1.414 4.242-4.242 4.243 4.242 1.414-1.414L13.364 12l4.242-4.242z"></path></svg>
						</button>
					</section>
			
					<section class="flex-grow flex flex-col gap-5 px-5 py-5">
			
						<div class="flex items-center gap-2">
							<p class="hidden">Filtrar: </p>
			
							<details class="dropdown relative list-none">
								<summary class="btn list-none flex items-center">Disponibilidad <svg id="iconDropdown" class="w-2.5 h-2.5 ms-2 transition-all" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
									<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
								</svg></summary>
								<ul class="p-5 shadow-xl border menu dropdown-content bg-white bg-base-100 rounded-box w-[200px] h-auto absolute top-50 z-10">
									<fieldset>
										<div class="flex items-center gap-3">
											<input type="radio" name="available" id="inStockAndOutStock" checked>
											<label for="inStockAndOutStock">Todos</label>
										</div>
										<div class="flex items-center gap-3">
											<input type="radio" name="available" id="inStock">
											<label for="inStock">En inventario</label>
										</div>
										<div class="flex items-center gap-3">
											<input type="radio" name="available" id="outStock">
											<label for="outStock">Agotados</label>
										</div>
									</fieldset>
								</ul>
							</details>
						</div>
			
						<div class="flex items-center gap-2">
							<p class="hidden">Filtrar: </p>
			
							<details class="dropdown relative list-none">
								<summary class="btn list-none flex items-center">Precio <svg id="iconDropdown" class="w-2.5 h-2.5 ms-2 transition-all" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
									<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
								</svg></summary>
								<ul class="p-5 shadow-xl border menu dropdown-content bg-white bg-base-100 rounded-box w-[200px] h-auto absolute top-50 z-[9]">
									<span id="spanMinPrice" class="text-gray-500" data-min-price={minPrice}> Precio Min: {minPrice}</span>
									<li class="flex flex-row items-center gap-3 mb-3 mt-2">
										<label for="minPrice">$</label>
										<input type="number" name="minPrice" id="minPrice" placeholder="Desde" class="w-full py-1 px-2 dark:text-white" autocomplete="off"></input>
									</li>
									<span id="spanMaxPrice" class="text-gray-500" data-max-price={maxPrice}> Precio Max: {maxPrice}</span>
									<li class="flex items-center gap-3 mt-2">
										<label for="maxPrice">$</label>
										<input type="number" name="maxPrice" id="maxPrice" placeholder="Hasta" class="w-full py-1 px-2 dark:text-white" autocomplete="off"></input>
									</li>
								</ul>
							</details>
						</div>
						
						<div class="flex items-center gap-2">
							<p>Ordenar: </p>
			
							<select id="optionsToSort" name="select" class="bg-transparent py-2 px-2 border-black border-2">
								<option value="Destacados">Destacados</option>
								<option value="Precio mayor a menor">Precio mayor a menor</option>
								<option value="Precio menor a mayor">Precio menor a mayor</option>
							</select>
						</div>
					</section>
			
					<section class="text-center border-t border-gray py-4 basis-0">
						<button type="button" class="px-3 py-2 bg-black text-white shadow-sm rounded ">Eliminar todo</button>
					</section>
						
				</section>
			</section>

			<section id="sectionListProducts" class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 pt-5 gap-x-3 z-[-10]">
				
				{
					allProducts?.map((item) => (
					  <a href={"/product/" + item.name} class="itemProduct">
						  <ProductCard productName={item.name} productImage={"data:image/png;base64," + item.image} productPrice={item.price} available={item.available} interactions={item.interactions}></ProductCard>
					  </a>
					))
				}	

			</section>

			<nav aria-label="Page navigation example" class="mt-5 flex justify-center items-center">
				<div class="flex items-center justify-center px-3 h-8 ms-0 leading-tight text-gray-500 bg-white border border-e-0 border-gray-300 rounded-s-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white listPrevElement">Anterior</div>
				<ul class="listPage inline-flex -space-x-px text-sm justify-center items-center">
				</ul>
				<div class="flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 rounded-e-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white listNextElement">Siguiente</div>	
			</nav>


		</section>

	</main>
    
</Layout>

<script>

	const btnCancelFilter = document.querySelector('#btnCancelFilter');
	const formFilterSort = document.querySelector('#formFilterSort');
	const btnToFilterSort = document.querySelector('#btnToFilterSort');
	const bodySection = document.querySelector('#bodySection');
	const listPrev = document.querySelector('.listPrevElement');
	const listNext = document.querySelector('.listNextElement');
	const optionsToSort = document.querySelector('#optionsToSort');
	const minPrice = document.querySelector('#minPrice') as HTMLInputElement;
	const maxPrice = document.querySelector('#maxPrice') as HTMLInputElement;
	const mainListProducts = document.querySelectorAll('.itemProduct > article');
	const checkboxInStock = document.querySelector('#inStock') as HTMLInputElement;
	const checkboxOutStock = document.querySelector('#outStock') as HTMLInputElement;
	const checboxInStockAndOutStock = document.querySelector('#inStockAndOutStock') as HTMLInputElement;
	const lengthProducts = document.querySelectorAll('.lengthProducts');

	let thisPage = 1;
	let limit = 4;
	let mainList = document.querySelectorAll('.itemProduct');

	function loadItem() {

		const contLengthProducts = mainList.length;
		const totalProducts = mainListProducts.length;

		const text = contLengthProducts !== totalProducts ? `${contLengthProducts} de ${totalProducts} productos` : `${totalProducts} productos`;

		lengthProducts.forEach(item => {
			item.textContent = text;
		});

		let beginGet = limit * (thisPage - 1);
    	let endGet = limit * thisPage - 1;	

		mainList.forEach((item, key) => {
			if (key >= beginGet && key <= endGet) {
				item.classList.remove('hidden');
				item.classList.add('block');
			} else {
				item.classList.remove('block');
				item.classList.add('hidden');
			}
		});

		listPage();
	}

	loadItem();

	function listPage() {

		let count = Math.ceil(mainList.length / limit);
		let startPage = Math.max(1, thisPage - 2); 
		let endPage = Math.min(startPage + 4, count);
		document.querySelector('.listPage').innerHTML = '';

		for (let i = startPage; i <= endPage; i++) {
			let newPage = document.createElement('li');
			newPage.innerText = i + '';
			newPage.className = 'listNums flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white';

			if (i == thisPage) {
				newPage.className = 'listNums flex items-center justify-center px-3 h-8 text-blue-600 border border-gray-300 bg-blue-50 hover:bg-blue-100 hover:text-blue-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white';
			}

			document.querySelector('.listPage').appendChild(newPage);
		}

		const listNums = document.querySelectorAll('.listNums');

		for (let i = 0; i < listNums.length; i++) {
			listNums[i].addEventListener("click", () => {
				const num = parseInt(listNums[i].textContent);
				changePage(num);
			});
		}

	}

	function changePage(i) {
		thisPage = i;
		loadItem();
	}

	function chagenToFilterOrSort(option: string) {
		const list = document.querySelectorAll('.itemProduct > article');
		const container = document.querySelector('#sectionListProducts');
		container.innerHTML = '';

		let comparator;

		switch (option) {
			case 'destacados':
				comparator = (a, b) => parseInt(b.element.getAttribute('data-interactions')) - parseInt(a.element.getAttribute('data-interactions'));
				break;
			case 'precio mayor a menor':
				comparator = (a, b) => parseInt(b.element.getAttribute('data-price')) - parseInt(a.element.getAttribute('data-price'));
				break;
			case 'precio menor a mayor':
				comparator = (a, b) => parseInt(a.element.getAttribute('data-price')) - parseInt(b.element.getAttribute('data-price'));
				break;
			default:
				return;
		}

		const sortedList = Array.from(list).map(element => ({ count: parseInt(element.getAttribute('data-interactions')), element })).sort(comparator);

		sortedList.forEach(item => {
			const anchor = document.createElement('a');
			anchor.setAttribute('href', "/product/" + item.element.getAttribute('data-name'));
			anchor.classList.add('itemProduct');
			anchor.appendChild(item.element);
			container.appendChild(anchor);
		});

		mainList = document.querySelectorAll('.itemProduct');
		loadItem();
	}

	function filterProductsByAvailable() {
		const container = document.querySelector('#sectionListProducts');
		container.innerHTML = '';

		let newList = Array.from(mainListProducts);

		if (checboxInStockAndOutStock.checked) {
			if(minPrice.value == '' && maxPrice.value == '') {
				newList = newList.filter(element => true);
			} else {
				newList = newList.filter(element => {
					const valueMaxPrice = (maxPrice.value != '') ? maxPrice.valueAsNumber : parseFloat(document.querySelector('#spanMaxPrice').getAttribute('data-max-price'));
					const valueMinPrice = (minPrice.value != '') ? minPrice.valueAsNumber : 0;
					const price = parseFloat(element.getAttribute('data-price'));

					if (minPrice.value != '' && maxPrice.value != '') {
						return (price >= valueMinPrice && price <= valueMaxPrice);
					} else if (minPrice.value != '') {
						return (price >= valueMinPrice);
					} else if (maxPrice.value != '') {
						return (price <= valueMaxPrice);
					}
				});
			}
		} else {
			const isCheckedInStock = checkboxInStock.checked;
			const isCheckedOutStock = checkboxOutStock.checked;

			newList = newList.filter(element => {
				const isAvailable = element.hasAttribute('data-available');
				const valueMaxPrice = (maxPrice.value != '') ? maxPrice.valueAsNumber : parseFloat(document.querySelector('#spanMaxPrice').getAttribute('data-max-price'));
				const valueMinPrice = (minPrice.value != '') ? minPrice.valueAsNumber : 0;
				const price = parseFloat(element.getAttribute('data-price'));

				if (minPrice.value != null && maxPrice.value != null) {
					return (isCheckedInStock && isAvailable && price >= valueMinPrice && price <= valueMaxPrice) || (isCheckedOutStock && !isAvailable && price >= valueMinPrice && price <= valueMaxPrice);
				} else if (minPrice.value != '') {
					return (isCheckedInStock && isAvailable && price >= valueMinPrice) || (isCheckedOutStock && !isAvailable && price >= valueMinPrice);
				} else if (maxPrice.value != '') {
					return (isCheckedInStock && isAvailable && price <= valueMaxPrice) || (isCheckedOutStock && !isAvailable && price <= valueMaxPrice);
				}
				return (isCheckedInStock && isAvailable) || (isCheckedOutStock && !isAvailable);
			});
		}

		newList.forEach(item => {
			const anchor = document.createElement('a');
			anchor.setAttribute('href', "/product/" + item.getAttribute('data-name'));
			anchor.classList.add('itemProduct');
			anchor.appendChild(item);
			container.appendChild(anchor);
		});

		thisPage = 1;
		mainList = document.querySelectorAll('.itemProduct');
		loadItem();
	}

	function filterProductsByPrice() {
		const valueMaxPrice = (maxPrice.value != '') ? maxPrice.valueAsNumber : parseFloat(document.querySelector('#spanMaxPrice').getAttribute('data-max-price'));
		const valueMinPrice = (minPrice.value != '') ? minPrice.valueAsNumber : 0;
		const list = mainListProducts;
		const container = document.querySelector('#sectionListProducts');
		container.innerHTML = '';

		const newList = Array.from(list).filter((element) => {
			const price = parseFloat(element.getAttribute('data-price'));
			const isAvailable = element.hasAttribute('data-available');

			if (checboxInStockAndOutStock.checked) {
				if (minPrice.value != '' && maxPrice.value != '') {
				return price >= parseFloat(minPrice.value) && price <= valueMaxPrice;
				} else if(minPrice.value != '') {
					return price >= valueMinPrice;
				} else if(maxPrice.value != '') {
					return price <= valueMaxPrice;
				} else {
					return element;
				}
			} else if(checkboxInStock.checked) {
				if (minPrice.value != '' && maxPrice.value != '') {
				return price >= parseFloat(minPrice.value) && price <= valueMaxPrice && isAvailable;
				} else if(minPrice.value != '') {
					return price >= valueMinPrice && isAvailable;
				} else if(maxPrice.value != '') {
					return price <= valueMaxPrice && isAvailable;
				} else {
					return element && isAvailable;
				}
			} else if(checkboxOutStock.checked) {
				if (minPrice.value != '' && maxPrice.value != '') {
				return price >= parseFloat(minPrice.value) && price <= valueMaxPrice && !isAvailable;
				} else if(minPrice.value != '') {
					return price >= valueMinPrice && !isAvailable;
				} else if(maxPrice.value != '') {
					return price <= valueMaxPrice && !isAvailable;
				} else {
					return element && !isAvailable;
				}
			}
		});

		newList.forEach(item => {
			const anchor = document.createElement('a');
			anchor.setAttribute('href', "/product/" + item.getAttribute('data-name'));
			anchor.classList.add('itemProduct');
			anchor.appendChild(item);
			container.appendChild(anchor);
		});

		thisPage = 1;
		mainList = document.querySelectorAll('.itemProduct');
		loadItem();
	}

	listPrev.addEventListener("click", () => {
		if (thisPage != 1) {
			changePage(thisPage - 1)
		}
	});

	listNext.addEventListener("click", () => {
		const count = Math.ceil(mainList.length / limit);
		if (thisPage != count) {
			changePage(thisPage + 1)
		}
	});

	btnToFilterSort.addEventListener('click', () => {
		formFilterSort.classList.remove('translate-x-full');
		bodySection.className = 'overflow-hidden';
	});

	btnCancelFilter.addEventListener('click', () => {
		formFilterSort.classList.add('translate-x-full');
		bodySection.className = '';
	});

	optionsToSort.addEventListener('change', () => {
		for (let i = 0; i < 3; i++) {
			if (optionsToSort[i].selected === true) {
				chagenToFilterOrSort(optionsToSort[i].value.toLowerCase());
			}
		}
	});

	maxPrice.addEventListener('change', filterProductsByPrice);
	minPrice.addEventListener('change', filterProductsByPrice);
	checboxInStockAndOutStock.addEventListener('change', filterProductsByAvailable);
	checkboxInStock.addEventListener('change', filterProductsByAvailable);
	checkboxOutStock.addEventListener('change', filterProductsByAvailable);


</script>